package br.com.rponte.pindecrypter;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import br.com.rponte.pindecrypter.keys.EncryptedZpk;
import br.com.rponte.pindecrypter.keys.MasterKey;
import br.com.rponte.pindecrypter.keys.keystorage.SimpleKeyStorage;

public class PinDecrypterTest {
	
	/**
	 * PIN card encrypted by a ZPK that uses format0 from ISO-9564-1
	 */
	private static final String ENCRYPTED_PIN = "6550A902EE026407"; // 1234 - generated by POS device
	private static final String ZPK_ENCRYPTED_UNDER_ZMK = "5419E72CF76C416234CCAF9372BD2C2B";
	
	@Test
	public void shouldDecryptPinGeneratedByAPOSDevice_usingMasterKey() throws Exception {
		// cenário
		String pan = "6056880264584207";
		String encryptedPin = ENCRYPTED_PIN;
		
		// ação
		KeyStorage keyStorage = new SimpleKeyStorage()
									.withMasterKey(masterKey())
									.withEncryptedZpk(zpkUnderZmk());
		
		PinDecrypter decrypter = new PinDecrypter(keyStorage);
		String pin = decrypter.decrypt(encryptedPin, pan);
		
		// validação
		assertEquals("decrypted pin", "1234", pin);
	}

	/**
	 * Decrypting a PIN generated by a tool or website
	 * https://neapay.com/online-tools/calculate-pin-block.html
	 * https://emvlab.org/descalc/?key=80206404F23ED50EE9F8576808B076CD&iv=0000000000000000&input=0420487FD9BA7BDF&mode=ecb&action=Encrypt&output=3635F104A27A9FE2
	 * 
	 * Clear ZPK: 80206404F23ED50EE9F8576808B076CD
	 * PIN Block: 0420487FD9BA7BDF
	 */
	@Test
	public void shouldDecryptAPinGeneratedByWebsite_usingMasterKey() throws Exception {
		// cenário
		String pan = "6056880264584207";
		String generatedEncryptedPin = "BA8EA4D3FCA5466D"; // 2020
		
		// ação
		KeyStorage keyStorage = new SimpleKeyStorage()
									.withMasterKey(masterKey())
									.withEncryptedZpk(zpkUnderZmk());

		PinDecrypter decrypter = new PinDecrypter(keyStorage);
		String pin = decrypter.decrypt(generatedEncryptedPin, pan);
		
		// validação
		assertEquals("decrypted generated pin", "2020", pin);
	}

	private MasterKey masterKey() {
		
		String key1 = "D9BFEA0E3B648A20FBC8673DE38A91C7";
		String key2 = "38F862C13D5257F757CEA78FE0A7465E";
		String key3 = "B5C7F710580B767C5E79F15723FD3BA7";
		
		return MasterKey.combined(key1, key2, key3);
	}
	
	private EncryptedZpk zpkUnderZmk() {
		EncryptedZpk zpkUnderZmk = new EncryptedZpk(ZPK_ENCRYPTED_UNDER_ZMK);
		return zpkUnderZmk;
	}

}
